{"version":3,"sources":["Components/SingleIBAN/SingleIBAN.js","Components/ListIBAN/ListIBAN.js","App.js","serviceWorker.js","index.js"],"names":["SingleIBAN","props","state","iban","valid","showResults","handleChange","bind","validateIBAN","e","this","setState","target","value","axios","get","responseType","then","a","res","data","status","className","style","color","htmlFor","type","id","placeholder","onChange","onClick","React","Component","ListIBAN","handleFileChange","preventDefault","arr","reader","FileReader","onload","text","result","split","map","code","key","item","replace","push","readAsText","files","responseList","validateIBANS","list","idx","post","role","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcebe5a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./SingleIBAN.css\";\r\n\r\nclass SingleIBAN extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      iban: null,\r\n      valid: null,\r\n      showResults: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.validateIBAN = this.validateIBAN.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      iban: e.target.value,\r\n      showResults: false\r\n    });\r\n  }\r\n\r\n  validateIBAN() {\r\n    axios\r\n      .get(`/api/check/${this.state.iban}`, {\r\n        responseType: \"json\"\r\n      })\r\n      .then(async res => {\r\n        this.setState({\r\n          iban: res.data.iban,\r\n          valid: res.data.status === \"valid\" ? true : false,\r\n          showResults: true\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"h-100 single-container\">\r\n        <div className=\"row text-center\">\r\n          <div className=\"col-12\">\r\n            <h3 className=\"shadow pad-10\" style={{ color: \"#abd9ab\" }}>\r\n              CHECK SINGLE IBAN\r\n            </h3>\r\n          </div>\r\n        </div>\r\n        <form>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"iban-input\">IBAN number</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"iban-input\"\r\n              placeholder=\"Enter the IBAN number...\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          {this.state.iban ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-upload-green\"\r\n              onClick={this.validateIBAN}\r\n            >\r\n              VALIDATE\r\n            </button>\r\n          ) : null}\r\n        </form>\r\n        {this.state.showResults ? (\r\n          <div className=\"row mar-top text-center\">\r\n            <div className=\"col-12\">\r\n              <h3>\r\n                {this.state.iban} <br />\r\n                {this.state.valid ? (\r\n                  <span className=\"valid\">IBAN IS VALID</span>\r\n                ) : (\r\n                  <span className=\"invalid\">IBAN IS NOT VALID</span>\r\n                )}\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleIBAN;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ListIBAN.css\";\r\n\r\nclass ListIBAN extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      responseList: [],\r\n      showResults: false\r\n    };\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.validateIBANS = this.validateIBANS.bind(this);\r\n  }\r\n\r\n  handleFileChange = async e => {\r\n    e.preventDefault();\r\n    let arr = [];\r\n    let reader = new FileReader();\r\n    reader.onload = async e => {\r\n      let text = e.target.result;\r\n      text = text.split(\"\\n\");\r\n      await text.map((code, key) => {\r\n        let item = code.replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\r\n        return arr.push(item);\r\n      });\r\n    };\r\n    await reader.readAsText(e.target.files[0]);\r\n    await this.setState({ data: arr });\r\n  };\r\n\r\n  validateIBANS() {\r\n    var list = {};\r\n    this.state.data.map((code, idx) => {\r\n      return list[idx] = code;\r\n    });\r\n    axios\r\n      .post(`/api/checkList/`, list, {\r\n        responseType: \"json\"\r\n      })\r\n      .then(async res => {\r\n        this.setState({\r\n          responseList: res.data.list,\r\n          showResults: true\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"h-100 list-container\">\r\n        <div className=\"row text-center\">\r\n          <div className=\"col-12\">\r\n            <h3 className=\"shadow pad-10\" style={{ color: \"#e7e7e7\" }}>\r\n              CHECK A LIST OF IBANs\r\n            </h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"alert alert-warning\" role=\"alert\">\r\n          Each <b>IBAN</b> number should be in a single line!\r\n        </div>\r\n        <form>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"file-input\">Attach a .txt file with IBANs</label>\r\n            <input\r\n              type=\"file\"\r\n              className=\"form-control-file\"\r\n              id=\"file-input\"\r\n              onChange={e => this.handleFileChange(e)}\r\n            />\r\n          </div>\r\n          {this.state.data}\r\n          {this.state.data ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-upload-light\"\r\n              onClick={this.validateIBANS}\r\n            >\r\n              VALIDATE\r\n            </button>\r\n          ) : null}\r\n        </form>\r\n        {this.state.showResults ? (\r\n          <div className=\"row mar-top text-center\">\r\n            <div className=\"col-12\">\r\n              {this.state.responseList.map(item => {\r\n                return <h3>\r\n                {item.iban} <br />\r\n                {item.status === \"valid\" ? (\r\n                  <span className=\"valid\">IBAN IS VALID</span>\r\n                ) : (\r\n                  <span className=\"invalid\">IBAN IS NOT VALID</span>\r\n                )}\r\n                </h3>\r\n              })}\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListIBAN;\r\n","import React from 'react';\nimport './App.css';\nimport SingleIBAN from './Components/SingleIBAN/SingleIBAN'\nimport ListIBAN from './Components/ListIBAN/ListIBAN'\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-lg-6 no-pad\">\n          <SingleIBAN />\n        </div>\n        <div className=\"col-sm-12 col-lg-6 no-pad\">\n          <ListIBAN />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}